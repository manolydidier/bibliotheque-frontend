// src/store/slices/Slice.js
import { createSlice } from '@reduxjs/toolkit';

const TOKEN_KEY = 'tokenGuard';
const USER_KEY  = 'user';

const readToken = () => { try { return localStorage.getItem(TOKEN_KEY); } catch { return null; } };
const readUser  = () => {
  try { const raw = localStorage.getItem(USER_KEY); return raw ? JSON.parse(raw) : null; } catch { return null; }
};

const initialState = {
  langue: 'fr',
  isReredingListeuser: false,
  auth: {
    loading: false,             // <-- c’est "loading" (pas isLoading)
    isAuthenticated: !!readToken(),
    token: readToken() || null,
    user: readUser(),
    error: null,
    roles: [],
    permissions: [],
  },
};

export const librarySlice = createSlice({
  name: 'library',
  initialState,
  reducers: {
    setAuthError: (state, action) => { state.auth.error = action.payload || null; },
    loginStart: (state) => { state.auth.loading = true; state.auth.error = null; },

    loginSuccess: (state, action) => {
      const token = action.payload?.token || null;
      const user  = action.payload?.user  || null;

      state.auth.isAuthenticated = !!token;
      state.auth.token = token;
      state.auth.user  = user;
      state.auth.roles = action.payload?.roles || [];
      state.auth.permissions = action.payload?.permissions || [];
      state.auth.loading = false;
      state.auth.error = null;

      try {
        if (token) localStorage.setItem(TOKEN_KEY, token);
        if (user)  localStorage.setItem(USER_KEY, JSON.stringify(user));
      } catch {}
    },

    loginFailure: (state, action) => {
      state.auth.loading = false;
      state.auth.error = action.payload || null;
      state.auth.isAuthenticated = false;
      state.auth.user = null;
      state.auth.token = null;
      state.auth.roles = [];
      state.auth.permissions = [];
      try {
        localStorage.removeItem(TOKEN_KEY);
        localStorage.removeItem(USER_KEY);
      } catch {}
    },

    logoutUser: (state) => {
      try { localStorage.removeItem(TOKEN_KEY); localStorage.removeItem(USER_KEY); } catch {}
      state.auth.isAuthenticated = false;
      state.auth.user = null;
      state.auth.token = null;
      state.auth.roles = [];
      state.auth.permissions = [];
      state.auth.loading = false;
      state.auth.error = null;
    },

    language: (state, action) => { state.langue = action.payload.langue; },

    updateUser: (state, action) => {
      state.auth.user = action.payload || null;
      try {
        if (state.auth.user) localStorage.setItem(USER_KEY, JSON.stringify(state.auth.user));
      } catch {}
    },

    refreshListUser: (state) => { state.isReredingListeuser = !state.isReredingListeuser; },
    clearAuthError: (state) => { state.auth.error = null; }
  },
});

export const {
  setAuthError, loginStart, loginSuccess, loginFailure, logoutUser,
  language, updateUser, refreshListUser, clearAuthError
} = librarySlice.actions;

export default librarySlice.reducer;

// Sélecteurs pratiques
export const selectAuthError   = (state) => state?.library?.auth?.error;
export const selectAuthLoading = (state) => state?.library?.auth?.loading;
