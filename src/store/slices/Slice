import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  langue: 'fr',
  isReredingListeuser: false,
  auth: {
    loading: false,
    isAuthenticated: !!localStorage.getItem('auth_token'),
    token: localStorage.getItem('auth_token') || null,
    user: JSON.parse(localStorage.getItem('user')) || null, // Ajout de JSON.parse
    error: null,
    roles: [],
    permissions: [],
  },
};

export const librarySlice = createSlice({
  name: 'library',
  initialState,
  reducers: {
    loginStart: (state) => {
      state.auth.loading = true;
      state.auth.error = null;
    },
    loginSuccess: (state, action) => {
      state.auth.isAuthenticated = true;
      state.auth.token = action.payload.token; // Ajout du token
      state.auth.user = action.payload.user;
      state.auth.roles = action.payload.roles || [];
      state.auth.permissions = action.payload.permissions || [];
      state.auth.loading = false;
      state.auth.error = null;
    },
    loginFailure: (state, action) => {
      state.auth.loading = false;
      state.auth.error = action.payload;
      state.auth.isAuthenticated = false;
      state.auth.user = null;
      state.auth.token = null;
    },
    logoutUser: (state) => {
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user');
      state.auth.isAuthenticated = false;
      state.auth.user = null;
      state.auth.token = null;
      state.auth.roles = [];
      state.auth.permissions = [];
    },
    language: (state, action) => {
      state.langue = action.payload.langue;
    },
    updateUser: (state, action) => {
      state.auth.user = action.payload;
      localStorage.setItem('user', JSON.stringify(action.payload));
    },
    refreshListUser: (state) => {
      state.isReredingListeuser = !state.isReredingListeuser;
    },
    clearAuthError: (state) => {
      state.auth.error = null;
    }
  },
});

export const {
  loginStart,
  loginSuccess,
  loginFailure,
  logoutUser,
  language, 
  updateUser,
  refreshListUser,
  clearAuthError
} = librarySlice.actions;

export default librarySlice.reducer;